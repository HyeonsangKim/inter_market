generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  password String?
  phone String? @unique
  sns_id String? @unique
  image String?
  emailVerified  DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  si        String?
  gu        String?
  dong      String?
  fullAdress String?

  products Product[]
  posts Post[]
  comments Comment[]
  pcomments Pcomment[]
  likes Like[]
  Plikes Plike[]
  accounts   Account[]
  sessions      Session[]

  @@map("user")
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id Int @id @default(autoincrement())
  title String
  price Float
  description String
  photos Image[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade) 
  userId String
  comments Pcomment[]
  likes Plike[]
  views Int @default(0)
}
model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId    Int
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
model Post {
  id Int @id @default(autoincrement())
  title String
  description String?
  views Int @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String
  comments Comment[]
  likes Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id],onDelete: Cascade)
 
  userId String
  postId Int
}
model Pcomment {
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  userId String
  productId Int

}
model Like {
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id],onDelete: Cascade)
  userId String
  postId Int
  @@id(name: "id",[userId,postId])
}

model Plike {
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  userId String
  productId Int
  @@id(name: "id",[userId,productId])
}