generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  password         String?
  phone            String?    @unique
  sns_id           String?    @unique
  image            String?
  emailVerified    DateTime?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  si               String?
  gu               String?
  dong             String?
  fullAdress       String?
  accounts         Account[]
  comments         Comment[]
  likes            Like[]
  receivedMessages Message[]  @relation("ReceivedMessages")
  sentMessages     Message[]  @relation("SentMessages")
  pcomments        Pcomment[]
  Plikes           Plike[]
  posts            Post[]
  products         Product[]
  sessions         Session[]
  chat_rooms       ChatRoom[] @relation("ChatRoomToUser")

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  price       Float
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  userId      String
  soldout     Boolean?   @default(false)
  views       Int        @default(0)
  photos      Image[]
  comments    Pcomment[]
  likes       Plike[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  userId      String
  comments    Comment[]
  likes       Like[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id         Int       @id @default(autoincrement())
  payload    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  userId     String
  postId     Int
  parentId   Int?
  parent     Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("Replies")
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pcomment {
  id         Int        @id @default(autoincrement())
  payload    String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  userId     String
  productId  Int
  parentId   Int?
  parent     Pcomment?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Pcomment[] @relation("Replies")
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String
  postId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId], name: "id")
}

model Plike {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String
  productId  Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, productId], name: "id")
}

model ChatRoom {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
  users      User[]    @relation("ChatRoomToUser")
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  senderId   String
  receiverId String
  isRead     Boolean  @default(false)
  chatRoomId String
  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}
